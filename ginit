#!/bin/bash
#                                                                    2019-07-19
#  Verifica inizializzazione GOTHINGS
                                                               VERSION="0.01.03"
#
#  Menu per la gestione dello stato iniziale del sistema gothings
#    - e' chiamato da ./g
#    - verifica l'esistenza di varie parti del sistema gothings
#    - dovrebbe rendere piu' fluida la gestione dal punto di vista utente finale
#    - consente di eseguire funzioni una-tantum
#      - es.: installazione di vue, node od altro
###########
#   DA VEDERE:   verificare se basta farlo solo per il terzo livello    #####################
#  Valori var di chiamata $1                                     NO!
#    E   verifica esistenza ginit          (per ora non usato)
#    I   verifica iniziale
#    A   verifica --TUTTO--                (per ora non usato)    NO!
#
###########
#
#  Verifica la correttezza dell'installazione delle varie parti di gothings:
#    BASE         verifica eseguita anche per conto di ./g                                    SI
#    VUEDEV       verifica presenza vuedev_g                                                  SI
#    NODE         manage node js development containers
#    PYTHON       manage python/flask development containers
#    USER         manage user containers
#    START        standard system
#    UPDATE       this menu
#
#
#   ****  TUTTO da definire  ****
#                                       *** Per ora:  ritorna 'tutto ok'
#
##################
#==============================================================================
#
# ----------------------------------
# Define variables
# ----------------------------------
EDITOR=nano
PASSWD=/etc/passwd
RED='\033[0;41;30m'
STD='\033[0;0;39m'
HOMEDIR="/home/pi/"
GITREPOBASE="https://raw.githubusercontent.com/fpirri/gothings-base/master/"

DEBUGLOG=""
RETLEVEL=0  # 0 : tutto OK; 1+ : situazione non valida ...
ITEXISTS=0  # 1 se il cercato esiste, 0 altrimenti
FILE=""     # Nome del file in fileexists()
MENUTRAP=0  #  66 : exit menu
FTYPE=$1    # Tipo di chiamata:   E  :  verifica esistenza
#                                 I  :  Install vuedev

cd ${HOMEDIR} #work on user 'pi' home

##########################################################################
# Verifica parametri di chiamata
if [ "$FTYPE" == "E" ]; then  # semplice verifica di esistenza, ritorna subito
  exit 0
fi
# altrimenti vai avanti
#
# NOTA: NON si riconoscono gli altri valori previsti
#
echo
echo "====================================================== GOTHINGS for raspi"
echo "  GINIT - Verifica installazione"
echo
#
##########################################################################
# ----------------------------------
# User defined functions
#
##########################################################################
avanti(){
  # Domanda di continuazione personalizzabile
  # call:    avanti $1
  #   $1:    "<stringa di domanda>"
  echo "----------------------------------------------------------------"
  read -rsp "$1" -n 1 key
  echo
}
#
##########################################################################
pause(){
#  Domanda 'continue or exit'
#    NO arguments
  avanti 'Press any key to continue or ^C to exit ...'
}
#
##########################################################################
boh(){
  # BOH!  Questa funzione e' ancora DA INIZIARE
  echo 
  echo
  echo "-------------------------------------------------------------- ?:"
  echo
  echo "Qui ci sara' una funzione, quando sara' fatta ..."
  echo
  #exit
  pause "?"
}
#
##########################################################################
toupdate(){
  #  Funzione IN CORSO DI MODIFICA
  echo 
  echo
  echo "------------------------------------------------------------ ???:"
  echo
  echo "This function will change scope."
  echo "A new definition & rewriting is on course"
  echo
  #exit
  pause "?"
}
#
##########################################################################
errmessage(){
  #  $1 :  nome del file non trovato
  #  $2 :  avviso all'utente, come '... il file xxx e' essenziale ...'
  echo 
  echo "------------------------------------------------------"
  echo -e "${RED} ERROR on file: $1 - debug message: ${STD}"
  echo $DEBUGLOG
  echo -e "$2"
  echo "------------------------------------------------------"
  echo 
}
#
##########################################################################
stopmenu(){
  #  $1 :  nome del file non trovato
  #  $2 :  avviso all'utente, come '... il file xxx e' essenziale ...'
  errmessage "$1" "$2"
  echo "Cannot continue."
  echo 
  MENUTRAP=66
  RETLEVEL=66
  return 66
}
#
##########################################################################
showsubtitle(){
  # 1. SHOW submenu header
  #
  # call:    showsubtitle $1
  #    "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  # $1:"         Sub menu title"
  #
  clear
  echo 
  echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  echo "$1"
  echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  echo 
}
#
##########################################################################
showcontainers(){
  # 1. SHOW containers status
  #               "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  RIPETI=1
  until [[ $RIPETI -gt 10 ]]
    do
      # 1. SHOW containers status
      #               "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
      #  showsubtitle "         sottotitolo piu' o meno centrato"
      showsubtitle "      MANAGE:  SHOW all containers"
      docker ps -a --format "table {{.Names}}\\t{{.Image}}\\t{{.Status}}"
      echo
      echo "------------------------------------"
      sleep 2
      read -rsp "Do you like to read again containers status? [y/N] " -n 1 key
      case "$key" in
          [yY])
            RIPETI=1
            ;;
          *)
            RIPETI=99
            ;;
      esac
   done
}
#
##########################################################################
getgitfile(){    # Lettura file da github
  #
  #  use globals:
  #    DEBUGLOG=""     # utile nel debug
  #    ITEXISTS=0      #  1 : file esiste    0 : file assente
  #
  #
  #     <-- se esiste il file $1 ed ha lunghezza > 0 :
  #         <-- si va avanti senza altre azioni
  #     <-- altrimenti si prova a scaricare il file da github               AGGIUSTARE dopo ......
  #     <-- si riprova il test di lunghezza
  #         se non funziona si torna con ITEXISTS=0
  #     
  # call:    findnodeapp $1 $2 $3
  #   $1:    "nomefile"
  #   $2:    "github project branch"
  #   $3:    "raspi path after /home/pi/ "
  # RETURN:
  #           ITEXISTS = 1 se esiste, 0 altrimenti
  #
  # Verify file existence, get it from github if not
  #
  # example:
  #          getgitfile "gotdirs.tar.gz" "gothings-install/master/" "dockrepo/sysarchive/"
  #
  #  bash:  -s file  True if file exists and has a size greater than zero
  local Filegit Githubfile
  Filegit="/home/pi/$3$1"
  DEBUGLOG="|| getgitfile() INFO || Il file cercato e': $Filegit"
  if [ -s $Filegit ]; then
    ITEXISTS=1    # file exists and length > 0
    DEBUGLOG="$DEBUGLOG | $Filegit esiste |"
  else            # si prova a scaricarlo
    Githubfile="https://raw.githubusercontent.com/fpirri/$2$1"
    DEBUGLOG="$DEBUGLOG | $Filegit does not exist | Get file from github: ${Githubfile}"
    wget -O "$Filegit" "$Githubfile"
    if [ -s $Filegit ]; then
      ITEXISTS=1    # file exists and length > 0
      DEBUGLOG="$DEBUGLOG | $Filegit trovato |"
    else
      ITEXISTS=0    # file introvabile !
      DEBUGLOG="$DEBUGLOG | $Filegit introvabile |"
      echo $DEBUGLOG                               ########### Stampa sempre mentre sviluppo ...
    fi
  fi
  return $ITEXISTS
}
#
##########################################################################                          ** IN SOSTITUZIONE **
json2string() {
  # Trasforma valori json da stringa in stringa nulla
  #   $1    nome variabile da verificare
  typeset -n ref1=$1 #                    ref1 punta alla variabile json
  case "$ref1" in #                       check valori anomali --> stringa ""
    null|true|false)
      ref1=""
      echo "null value"
      return 0
      ;;
    *)
      echo "value: $ref1"
      return 1
  esac
}
#
##########################################################################
bugmessage(){
  # stampa $debuglog ed un avviso di errore
  #
  #  $1 :  ERROR oppure WARNING
  #  $2 :  codice di errore
  #  stampa piccola storia  <-- debuglog
  #  $3 :  avviso all'utente, come '... il file xxx e' essenziale ...'
  echo 
  echo "------------------------------------------------------"
  echo -e "${RED} $1 $2 - debug message: ${STD}"
  echo ${debuglog}
  echo -e "$3"
  echo "------------------------------------------------------"
  echo 
}
#
##########################################################################       versione 2019-11-20
verifybaseexpand() {
  #  si verifica baseexpand.json per vedere se l'espansione e' da fare,
  #  ovvero se e' gia' fatta o non e' comunque necessaria:
  #
  #  ritorna 0 se l'operazione non ha prodotto errori
  #          1 se ci sono stati errori ...
  #
  #  error details in:  .../github-gothings/README.github.gothings
  #
  #  il dir .../dockimages/base DEVE contenere il file di configurazione baseexpand.json
  #  opzionalmente , l'utente puo' mettere anche i files baseexpand.sh e .tar.gz
  #  TUTTE le info necessarie sono nel .json
  #
  local filejson status filetargz githubgzfile script temp debuglog nvar
  filejson="${HOMEDIR}dockrepo/dockimages/base/baseexpand.json"
  #
  echo "    <-- configuration data read from ${filejson}"
  temp=($(cat "${filejson}" | jq -r '.status,.filetargz,.githubgzfile,.script'))
  # verifica che sono tornateb effettivamente 4 variabili  <-- SBAGLIATO, da vedere se ci sono null!!
  echo "    <--       status: ${temp[0]}"
  echo "    <--   filetar.gz: ${temp[1]}"
  echo "    <-- githubgzfile: ${temp[2]}"
  echo "    <--       script: ${temp[3]}"
  # aggiusta le variabili, se necessario
  nvar=0
  status=${temp[0]}
  json2string status
  (( nvar += $? ))
  filetargz=${temp[1]}
  json2string filetargz
  (( nvar += $? ))
  githubgzfile=${temp[2]}
  json2string githubgzfile
  (( nvar += $? ))
  if [[ "${nvar}" -ne 3 ]]; then
    debuglog="ERROR 1 - JSON file ${filejson} returned some null values"
    bugmessage ERROR 1 "    JSON returned invalid values"
    return 1 #                                                                 ERROR 1: Invalid JSON
  fi
  echo "    <-- non-null variables: ${nvar}"
  # verifica stringhe nulle
  temp=$((${#temp} * ${#status} * ${#filetargz} * ${#githubgzfile}))
  if [[ "${temp}" -eq 0 ]]; then
    debuglog="ERROR 2 - JSON returned empty string"
    bugmessage ERROR 2 "    JSON file ${filejson} returned empty string"
    return 2 #                                                                 ERROR 2: Invalid JSON
  fi
  # valori apparentemente accettabili, andiamo avanti
  echo "    <-- variable types OK"
  filetargz="${HOMEDIR}${filetargz}"
  echo "    <-- sysdata for BASE environment read from ${filetargz}"
  debuglog="|| verify expand |"
  case "${status}" in
    todo) #                                      expand archive .tar.gz
      echo "    <--  expand to be done"
      if [[ -s "${filetargz}" ]]; then # file exists and length > 0
        debuglog="${debuglog}| ${filetargz} esiste |"
      else #                             il file non esiste, proviamo a scaricarlo
        debuglog="${debuglog}| ${filetargz} does not exist | download githubgzfile: ${githubgzfile} |"
        wget -O "${filetargz}" "${githubgzfile}"
        if [[ -s "${filetargz}" ]]; then
          debuglog="${debuglog}| ${filetargz} trovato |" #  il file e' stato trovato e verra' espanso
          echo "    <--  archive file exists"
        else
          debuglog="{$debuglog}| ${filetargz} introvabile |"
          bugmessage ERROR 66 "    file not found"
          return 66
        fi
      fi
      echo "    <--  expand archive file"
      sudo tar xpf "${filetargz}" -C "$HOMEDIR" #   si espande l'archivio
      temp=$?
      if [[ ! $temp -eq 0 ]]; then
        debuglog="{$debuglog}| ${filetargz} expansion failed! - return: ${temp} | ERROR 66"
        bugmessage ERROR 66 "    archive expansion failed"
        return 66
      fi
      # espansione effettuata:  aggiorna il .json
      echo
      echo "    <-- expand OK, change .json status from 'todo' to 'done'"
      echo "$(cat "${filejson}" | jq -r '.status |= "done"')" > "${filejson}.new"
      temp=$?
      echo "    <-- save existing file into 'old'"
      cp -r "${filejson}"  "${filejson}.old"
      echo "    <-- copy 'new' file onto baseexpand.json"
      cp -r "${filejson}.new"  "${filejson}"
      echo -n "    <-- verify baseexpand.json status :"
      temp=($(cat ${filejson} | jq -r '.status'))
      echo ${temp}
      if [ "${temp}" != "done" ]; then
        bugmessage WARNING 5 "    ERROR : can't update ${filejson} file"
        return 5
      fi
      echo "    <-- .json status update OK"
      echo "    ------------------------------"
      ;;
    done)
      echo "    <-- expand not needed"
      ;;
    *)
      bugmessage WARNING 3 "    ERROR 3 - JSON status value is invalid"
      return 3
      ;;
  esac
  return 0
}
#
##########################################################################   versione 2019-11-??    ** IN CORSO **
verifybaseinstall() {
  #  si verifica baseinstall.json per vedere se l'installazione e' da fare,
  #  ovvero se e' gia' fatta o non e' comunque necessaria
  #
  #  ritorna:    0  se l'operazione non ha prodotto errori
  #          -ne 0  se ci sono stati errori ...
  #
  #  il dir .../dockimages/base DEVE contenere il file di configurazione baseinstall.json
  #  il .json mantiene lo stus dell'installazione ( todo / done )
  #
  local filejson status script temp nvar
  filejson="${HOMEDIR}dockrepo/dockimages/base/baseinstall.json"
  script="${HOMEDIR}dockrepo/sysdata/base/baseinstall.sh"
  #
  temp=($(cat "${filejson}" | jq -r '.status'))
  # verifica la variabile status
  echo "    <-- read status from json file ${filejson}"
  status=${temp[0]}
  json2string status
  nvar=$?
  if [[ "${nvar}" -ne 1 ]]; then
    debuglog="ERROR 1 - JSON returned status null"
    bugmessage ERROR 1 "    JSON file ${filejson} returned status null"
    return 1 #                                                                 ERROR 1: Invalid JSON
  fi
  debuglog="|| verify install |"
  case "${status}" in
    todo) #                                                                       install base to do
      if [[ -s "${script}" ]]; then # file exists and length > 0
        debuglog="|${debuglog}| ${script} esiste |"
      else
        debuglog="|${debuglog}| install script ${script} not found |"
        bugmessage ERROR 66 "    file not found"
        return 66 #                                                 il file non esiste  -->  ERRORE 4
      fi
      # do install :
      echo "    <-- exec ${script} ..."
      . ${script} # esegui lo script di install
      temp=$?
      echo
      echo "    <-- ${script} return code: ${temp}"
      if [ "${temp}" -gt 0 ]; then # errore nello script
        debuglog="|${debuglog}| install script error: ${temp} |"
        bugmessage ERROR "${temp}" "    script execution error"
        return "${temp}"
      else
        # install done : update .json file
        echo
        echo "    <-- update .json status from 'todo' to 'done'"
        echo "$(cat "${filejson}" | jq -r '.status |= "done"')" > "${filejson}.new"
        temp=$?
        echo "    <-- save existing file into 'old'"
        cp -r "${filejson}"  "${filejson}.old"
        echo "    <-- copy 'new' file onto baseinstall.json"
        cp -r "${filejson}.new"  "${filejson}"
        echo -n "    <-- verify baseinstall.json status : "
        temp=($(cat ${filejson} | jq -r '.status'))
        echo ${temp}
        # temp=($(cat /home/pi/dockrepo/dockimages/base/baseinstall.json | jq -r '.status'))
        if [ "${temp}" != "done" ]; then
          bugmessage ERROR 5 "    ERROR : can't update ${filejson} file"
          return 5 #                                         update JSON file failed!  -->  ERRORE 5
        fi
      fi
      echo "    <-- .json status update OK"
      echo "    ------------------------------"
      ;;
    done)
      echo "    OK - install not required"
      ;;
    *)
      bugmessage ERROR 3 "    ERROR 3 - JSON status value is invalid"
      return 0
      ;; #                                                                     ERROR 3: Invalid JSON
  esac
  echo "    INSTALL phase OK"
  return 0
}
#
##########################################################################                          ** IN ELIMINAZIONE **
verifyvuedev() {
  #   Verifica esistenza file di gestione vuedev:  vuedev_g
  #   eventuale espansione da file archivio
  echo
  echo "Verify vuedev install script exists ..."
  local Filebasegz Pidirgz Filemark
  RETLEVEL=0 #-- si parte con 'tutto bene'
  Filegz="vuedev_g"
  Pidirgz="dockrepo/dockimages/vuedev/"
  # verifichiamo esistenza file
  getgitfile "${Filegz}" "gothings-install/master/" "${Pidirgz}"
  if [ $ITEXISTS -ne 1 ]; then  # SI torna con errore se vuedev_g non esiste
    errmessage "${Filegz}"  "file ${Filegz} is essential for control menu"
    return 3 #                                                                #### report errore '3'
  fi
  # il file dockrepo/dockimages/vuedev/vuedev_g esiste, proseguiamo
  #chmod +x "${Pidirgz}${Filegz}" #  <-- rendi il file eseguibile                           ELIMINATO
  "${Pidirgz}${Filegz}" "E"  # verifica esistenza dello script
  RISULTATO=$?
  echo
  echo "VUEDEV done. Result code is: ${RISULTATO}"
  if [ ${RISULTATO} -eq 127 ]; then
    echo "Cannot find VUEDEV install script"
    return 4  #                                                               #### report errore '4'
  elif [ ${RISULTATO} -eq 126 ]; then
    echo "VUEDEV script is not executable"
    return 4  #                                                               #### report errore '4'
  elif [[ ${RISULTATO} -eq 0 ]]
  then
    # se si arriva qui significa che i file 'vuedev_g' esiste ed e' eseguibile
    echo "VUEDEV script is OK"
    return 0
  fi
}
#
#
###############################
#    Main Logic execution     #
###############################
#
############################################################### MAIN LOGIC
##########################################################################
#
##########################################################################
############################# Verifica pre-requisiti per sottosistema BASE
echo
echo "  Verify installation of BASE subsystem ..."
echo
echo "    <-- expand phase starts ..."
verifybaseexpand
#
#----  verifica parte expand
# - si verifica baseexpand.json per vedere se l'espansione e' da fare,
#    ovvero se e' gia' fatta o non e' comunque necessaria:
#
#  ritorna:  0  se l'operazione expand non ha prodotto errori
#           !0  se ci sono stati errori ...
#
#  error details in:  .../github-gothings/README.github.gothings
#
RETLEVEL=$?
echo "    <-- expand phase returns code ${RETLEVEL}"
if [ ${RETLEVEL} -gt 0 ]; then
  debuglog="Expand phase not good"
  if [ ${RETLEVEL} -lt 50 ]; then
    echo
    bugmessage ERROR "${RETLEVEL}" "    expand phase"
  else
    echo
    bugmessage ERROR "${RETLEVEL}" "    expand phase"
  fi
  MENUTRAP=${RETLEVEL}
  pause
  exit ${MENUTRAP}
fi
echo "    EXPAND PHASE DONE."
#
echo
echo "    <-- INSTALL PHASE starts ..."
verifybaseinstall
#
#----  verifica parte install
# - si verifica baseinstall.json per vedere se l'espansione e' da fare,
#    ovvero se e' gia' fatta o non e' comunque necessaria:
#
#  ritorna:  0  se l'operazione install non ha prodotto errori
#           !0  se ci sono stati errori ...
#
#  error details in:  .../github-gothings/README.github.gothings
#
RETLEVEL=$?
echo "    <-- install phase returns code ${RETLEVEL}"
if [ ${RETLEVEL} -gt 0 ]; then
  if [ ${RETLEVEL} -lt 50 ]; then
    echo
    bugmessage WARNING "${RETLEVEL}" "    Warning ${RETLEVEL} in install phase"
  else
    echo
    bugmessage ERROR "${RETLEVEL}" "    error ${RETLEVEL} in install phase"
    echo -e "${RED} ERROR ${RETLEVEL} in install phase ${STD}"
    MENUTRAP=${RETLEVEL}
    pause
    exit ${MENUTRAP}
  fi
else
  echo "    <-- INSTALL PHASE DONE."
  echo
fi
pause
exit ${MENUTRAP}
#
#
##########################################################  siamo qui
exit 0
#
########################################################## Verifica VUEDEV
verifyvuedev
RETLEVEL=$?
if [ ${RETLEVEL} -ne 0 ]; then
  echo
  echo -e "${RED} ERROR ${RETLEVEL} on VUEDEV application ${STD}"
  sleep 5
  MENUTRAP=66
  pause
  exit ${MENUTRAP}
else
  echo "  --> BASE subsystem is installed"
  echo
fi
############################# Verifica

############################# FINE Verifica
echo "DEBUG: ginit OK - back to control menu ..."
sleep 2
exit 0
